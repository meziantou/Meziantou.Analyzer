<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ output extension=".g.cs" #>
<#@ assembly name="System.Linq" #>
<#@ import namespace="System.Linq" #>

#nullable enable
using System;
using System.Collections.Immutable;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Diagnostics;
using Microsoft.CodeAnalysis.Operations;

namespace Meziantou.Analyzer;

internal static partial class ContextExtensions
{
<# foreach (string type in new string[] { "SyntaxNodeAnalysisContext", "SymbolAnalysisContext", "OperationAnalysisContext", "OperationBlockAnalysisContext", "CompilationAnalysisContext" }) { #>
    public static void ReportDiagnostic(this <#= type #> context, DiagnosticDescriptor descriptor, SyntaxToken syntaxToken, params string?[]? messageArgs)
        => ReportDiagnostic(new DiagnosticReporter(context), descriptor, syntaxToken, messageArgs);

    public static void ReportDiagnostic(this <#= type #> context, DiagnosticDescriptor descriptor, ImmutableDictionary<string, string?>? properties, SyntaxToken syntaxToken, params string?[]? messageArgs)
        => ReportDiagnostic(new DiagnosticReporter(context), descriptor, properties, syntaxToken, messageArgs);

    public static void ReportDiagnostic(this <#= type #> context, DiagnosticDescriptor descriptor, SyntaxNode syntaxNode, params string?[]? messageArgs)
        => ReportDiagnostic(new DiagnosticReporter(context), descriptor, syntaxNode, messageArgs);

    public static void ReportDiagnostic(this <#= type #> context, DiagnosticDescriptor descriptor, ImmutableDictionary<string, string?>? properties, SyntaxNode syntaxNode, params string?[]? messageArgs)
        => ReportDiagnostic(new DiagnosticReporter(context), descriptor, properties, syntaxNode, messageArgs);

    public static void ReportDiagnostic(this <#= type #> context, DiagnosticDescriptor descriptor, ISymbol symbol, params string?[]? messageArgs)
        => ReportDiagnostic(new DiagnosticReporter(context), descriptor, ImmutableDictionary<string, string?>.Empty, symbol, messageArgs);

    public static void ReportDiagnostic(this <#= type #> context, DiagnosticDescriptor descriptor, ImmutableDictionary<string, string?>? properties, ISymbol symbol, params string?[]? messageArgs)
        => ReportDiagnostic(new DiagnosticReporter(context), descriptor, properties, symbol, messageArgs);
        
    public static void ReportDiagnostic(this <#= type #> context, DiagnosticDescriptor descriptor, Location location, params string?[]? messageArgs)
        => ReportDiagnostic(new DiagnosticReporter(context), descriptor, location, messageArgs);

    public static void ReportDiagnostic(this <#= type #> context, DiagnosticDescriptor descriptor, ImmutableDictionary<string, string?>? properties, Location location, params string?[]? messageArgs)
        => ReportDiagnostic(new DiagnosticReporter(context), descriptor, properties, location, messageArgs);

    public static void ReportDiagnostic(this <#= type #> context, DiagnosticDescriptor descriptor, SyntaxReference syntaxReference, params string?[]? messageArgs)
        => ReportDiagnostic(new DiagnosticReporter(context), descriptor, syntaxReference, messageArgs);

    public static void ReportDiagnostic(this <#= type #> context, DiagnosticDescriptor descriptor, ImmutableDictionary<string, string?>? properties, SyntaxReference syntaxReference, params string?[]? messageArgs)
        => ReportDiagnostic(new DiagnosticReporter(context), descriptor, properties, syntaxReference, messageArgs);
        
    public static void ReportDiagnostic(this <#= type #> context, DiagnosticDescriptor descriptor, ImmutableDictionary<string, string?>? properties, IInvocationOperation operation, DiagnosticReportOptions options, params string?[] messageArgs)
        => ReportDiagnostic(new DiagnosticReporter(context), descriptor, properties, operation, options, messageArgs);

    public static void ReportDiagnostic(this <#= type #> context, DiagnosticDescriptor descriptor, ImmutableDictionary<string, string?>? properties, ILocalFunctionOperation operation, DiagnosticReportOptions options, params string?[] messageArgs)
        => ReportDiagnostic(new DiagnosticReporter(context), descriptor, properties, operation, options, messageArgs);

    public static void ReportDiagnostic(this <#= type #> context, DiagnosticDescriptor descriptor, IOperation operation, params string?[] messageArgs)
        => ReportDiagnostic(new DiagnosticReporter(context), descriptor, operation, messageArgs);

    public static void ReportDiagnostic(this <#= type #> context, DiagnosticDescriptor descriptor, ImmutableDictionary<string, string?>? properties, IOperation operation, params string?[] messageArgs)
        => ReportDiagnostic(new DiagnosticReporter(context), descriptor, properties, operation, messageArgs);
<# } #>
}
