trigger:
  branches:
    include:
    - '*'
  paths:
    include:
    - src/*
    - tests/*
    - azure-pipelines.yml
    - Directory.Build.props
    - Meziantou.Analyzer.sln

pr:
  autoCancel: true
  branches:
    include:
    - '*'

variables:
  patch: $[counter('versioncounter', 89)]
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1

name: 1.0.$(patch)

stages:
- stage: build
  jobs:
  - job: linter_global
    pool:
      vmImage: 'ubuntu-20.04'
    steps:
    - script: docker pull github/super-linter:latest
      displayName: Pull GitHub Super-Linter image
    - script: >-
        docker run \
          -e RUN_LOCAL=true \
          -e VALIDATE_CSHARP=false \
          -e VALIDATE_POWERSHELL=false \
          -e VALIDATE_EDITORCONFIG=false \
          -v $(System.DefaultWorkingDirectory):/tmp/lint \
          github/super-linter
      displayName: 'Run GitHub Super-Linter'

  - job: linter_dotnet
    pool:
      vmImage: 'ubuntu-20.04'
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '3.1.x'

    - task: DotNetCoreCLI@2
      displayName: 'Install dotnet format'
      inputs:
        command: 'custom'
        custom: 'tool'
        arguments: 'update -g dotnet-format'
    
    - task: DotNetCoreCLI@2
      displayName: 'Lint dotnet'
      inputs:
        command: 'custom'
        custom: 'format'
        arguments: '--dry-run --check --verbosity diagnostic'

  - job: build
    pool:
      vmImage: 'windows-2019'
    variables:
      solution: '**/*.sln'
      buildPlatform: 'Any CPU'
      buildConfiguration: 'Release'
    steps:
    - task: UseDotNet@2
      displayName: Install .NET SDK
      inputs:
        packageType: 'sdk'
        version: '3.1.x'

    - task: NuGetToolInstaller@1
      displayName: Install NuGet
      inputs:
        versionSpec: 5.7.0

    - task: PowerShell@2
      displayName: Update version
      inputs:
        filePath: 'build\update-version.ps1'
        arguments: '$(Build.BuildNumber)'
        pwsh: true

    - task: NuGetCommand@2
      displayName: NuGet Restore
      inputs:
        command: 'restore'

    - task: VSBuild@1
      displayName: Build solution
      inputs:
        solution: '**\*.sln'
        maximumCpuCount: true
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'

    - task: VSTest@2
      displayName: Run tests
      inputs:
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'

    - task: CopyFiles@2
      displayName: Prepare artifacts
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)'
        Contents: |
          README.md
          build/**
          **/*.vsix
          **/*.nupkg
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - publish: $(Build.ArtifactStagingDirectory)
      artifact: drop

- stage: deploy
  dependsOn:
    - build
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  jobs:
  - deployment: publish_nuget
    displayName: Publish NuGet package
    pool:
      vmImage: 'windows-2019'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: NuGetCommand@2
            displayName: 'NuGet push'
            inputs:
              command: push
              packagesToPush: '$(Pipeline.Workspace)/drop/**/*.nupkg'
              nuGetFeedType: external
              publishFeedCredentials: 'Nuget.org - VSTS Token'
              
  - deployment: publish_vsix
    displayName: Publish VSIX package
    pool:
      vmImage: 'windows-2019'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: PowerShell@2
            displayName: 'Publish VSIX to marketplace'
            inputs:
              targetType: filePath
              filePath: '$(Pipeline.Workspace)/drop/build/publish-vsix.ps1'
              arguments: '$(MarketplacePAT)'
              pwsh: true
